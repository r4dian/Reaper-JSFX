desc: MIDI Negative Harmony v1 [radian]
//tags: MIDI processing mapping
//author: Radian
//info: https://www.quora.com/What-is-negative-harmony-in-music

// Original Key
slider1:0<0,12,1{0:C,1:C#,2:D,3:D#,4:E,5:F,6:F#,7:G,8:G#,9:A,10:A#,11:B}>Original Key Root
// Move to the nearst negative note e.g. A up to Bb or move all around the "Axis" of negative harmony (e.g. A moves 11 semitones down to Bb)
slider2:1<0,1,1{0:Full Negation,1:Nearest}>Use Nearest Negative Equivalent
// Preserve 3rds e.g. so you can still play the I chord of original key
slider3:0<0,1,1{0:No,1:Yes}>Preserve Original Key iii & III

in_pin:none
out_pin:none

////////////////////////////////////////////////////////////////////////////////
@init

statNoteOn  = $x90;
statNoteOff = $x80;

initialFullMap[0]  = 7;     //    C->G
initialFullMap[1]  = 5;     //    C#->F#
initialFullMap[2]  = 3;     //    D->F
initialFullMap[3]  = 1;     //    Eb->E
initialFullMap[4]  = -1;    //    E->Eb
initialFullMap[5]  = -3;    //    F-D
initialFullMap[6]  = -5;    //    F#->C#
initialFullMap[7]  = -7;    //    G->C
initialFullMap[8]  = -9;    //    G#->B
initialFullMap[9]  = -11;   //    A->Bb
initialFullMap[10] = 11;    //    Bb->A
initialFullMap[11] = 9;     //    B->G#

initialNearestMap[0]  = -5;  //    C->G
initialNearestMap[1]  = 5;   //    C#->F#
initialNearestMap[2]  = 3;   //    D->F
initialNearestMap[3]  = 1;   //    Eb->E
initialNearestMap[4]  = -1;  //    E->Eb
initialNearestMap[5]  = -3;  //    F-D
initialNearestMap[6]  = -5;  //    F#->C#
initialNearestMap[7]  = 5;   //    G->C
initialNearestMap[8]  = 3;   //    G#->B
initialNearestMap[9]  = 1;   //    A->Bb
initialNearestMap[10] = -1;  //    Bb->A
initialNearestMap[11] = -3;  //    B->G#

////////////////////////////////////////////////////////////////////////////////
@slider

originalRoot         = slider1;
useNearestEquivalent = slider2;
preserveThirds       = slider3;

useNearestEquivalent == 1 ?
(
  initialMap = initialNearestMap;
) : (
  initialMap = initialFullMap; // TODO: Doesn't work?
);

i = 0;
while
(
  preserveThirds == 1 & i % 12 == 3 | i % 12 == 4 ? // TODO: Doesn't work?
  (
    map[i] = 0;
  ) : (
    map[i] = initialMap[(i - originalRoot) % 12]; 
  );
  (i += 1) < 128; 
);


////////////////////////////////////////////////////////////////////////////////
@block

// https://www.reaper.fm/sdk/js/midi.php#js_midi
while
(
  midirecv(offset, msg1, msg23) ?
  (  
    // Extract message type and channel
    status = msg1 & $xF0;
    channel = msg1 & $x0F;

    // Is it a note event?
    status == statNoteOn || status == statNoteOff ?
    (
      // Extract note value
      note = msg23 & $x7F;

      // Substitute note value and pass on modified message
      midisend(offset, msg1, (msg23 & $xFF00) | note + map[note]); 
    )
    :
    (
      midisend(offset, msg1, msg23); // Not a note, pass thru
    );
    
    1; // Force loop to continue until all messages have been processed
  );
);